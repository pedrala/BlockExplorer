<script>
	const dataObj = {};
	const english = /^[A-Za-z0-9]*$/;
	$(document).ready(function () {
		const tokenParam = '<%=tokenAction%>';

		let strLen = tokenParam.length;

		if ((tokenParam.substr(strLen - 4, 4) == 'name')) {
			dataObj.tokenName = tokenParam.substr(0, strLen - 4);
			dataObj.tokenAction = '';
			dataObj.tokenSymbol = '';
		} else if (!isNaN(tokenParam)) {
			dataObj.tokenName = '';
			dataObj.tokenAction = tokenParam;
			dataObj.tokenSymbol = '';
		} else {
			dataObj.tokenName = '';
			dataObj.tokenAction = '';
			dataObj.tokenSymbol = tokenParam;
		}

		//console.log("dataObj:" + JSON.stringify(dataObj));

		//if obj is empty or undefined
		if ((dataObj && Object.keys(dataObj).length === 0 && dataObj.constructor === Object)
			|| (dataObj && dataObj.tokenAction == 'undefined' && dataObj.constructor === Object)
			|| !(english.test(dataObj.tokenSymbol) && dataObj.constructor === Object)) { //if obj is non-english string(ex:Korean)
			window.location.href = URL + '/error-page/' + 'default';

		} else {

			if ((dataObj.tokenAction == undefined || dataObj.tokenAction == '')
				&& (dataObj.tokenName == undefined || dataObj.tokenName == '')
			)
				getTokenAction()
			else if (dataObj.tokenName == undefined || dataObj.tokenName == '')
				getTokenDetailInfo()
			else
				getTokenDetailInfoByName()
		}
	});

	function getTokenAction() {

		$.ajax({
			type: "get",
			url: `${URL}${TOKEN_ACTION}`,
			data: dataObj,
			success: function (d) {

				if (d.data == 'error') {
					window.location.href = URL + '/error-page/' + 'default';
				} else {
					dataObj.tokenAction = d.data;
					//console.log("tokenAction:" + dataObj.tokenAction);
					getTokenDetailInfo()
				}
			},
			error: function (request, status, error) {
				window.location.href = URL + '/error-page/' + 'default';
				//console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);				
			},
		});
	};

	/**
	 * fetching detail data for token detail  
	 * @event tableStart
	 * @param 
	 */
	function getTokenDetailInfo() {

		$.ajax({
			type: "get",
			url: `${URL}${TOKEN_DETAIL_INFO}`,
			data: dataObj,
			success: function (d) {

				if (d.data == 'error') {
					window.location.href = URL + '/error-page/' + 'default';
				} else {
					tableStart(d);
				}
			},
			error: function (request, status, error) {
				window.location.href = URL + '/error-page/' + 'default';
				//	console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
			},
		});
	};

	/**
	 * fetching detail data for token detail  
	 * @event tableStart
	 * @param 
	 */
	function getTokenDetailInfoByName() {

		$.ajax({
			type: "get",
			url: `${URL}${TOKEN_DETAIL_INFO_BYNAME}`,
			data: dataObj,
			success: function (d) {

				if (d.data == 'error') {
					window.location.href = URL + '/error-page/' + 'default';
				} else {
					tableStart(d);
				}
			},
			error: function (request, status, error) {
				window.location.href = URL + '/error-page/' + 'default';
				//console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
			},
		});
	};

	/**
	 * displaying detail data on page  
	 * @event tableStart
	 * @param 
	 */
	function tableStart(d) {
		if (d.data.errorCode == 3000) {
			window.location.href = URL + '/error-page/' + d.data.contents.msg;
		}

		const txsData = d.data.tAccountInfo;
			//console.log("txsData:" + JSON.stringify(txsData))

		const token_name = txsData.name;

		/*accountNum -> hexa to decimal*/
		//console.log("decimal-AccountNum:" + txsData.account_num);
		let accountNumHexa = '';
		accountNumHexa = BigInt(txsData.account_num).toString('16').toUpperCase();
		//console.log("Hexa-AccountNum:" + accountNumHexa);     

		//time calc for transaction table
		let time = txsData.create_tm;
		time = time * 1;
		const tt = moment(time).fromNow();
		//age
		const age = `${tt.split(' ')[0]}` + ' ' + `${tt.split(' ')[1]}` + ' ' + `${tt.split(' ')[2]}`;
		//time
		const create_tm = getPullTime(Number(txsData.create_tm)) || '';
		const total_supply = new Intl.NumberFormat().format(txsData.total_supply);//nFormatter(txsData.total_supply);
		const market_supply = new Intl.NumberFormat().format(txsData.market_supply);//nFormatter(txsData.market_supply);
		const block_num = txsData.blk_num;
		const ownerPk = base58(txsData.owner_pk) || '';
		const superPk = base58(txsData.super_pk) || '';
		//const account_num = txsData.account_num || '';

		$('#tokenName').html(token_name);
		dataObj.tokenAction = txsData.action

		if(token_name != 'NFT' )
		{
			$('#tokenLogo').show();
			//로고이미지 노출
			$('#tokenLogo').html(
				`<img style="width:60px; height:60px" src='${imgURL}:80/mainnetAction/${dataObj.tokenAction}.svg' ></img>`
			);
		}
		else{
			$('#tokenLogo').hide();
		}

		$('#totSupply').html(total_supply);
		$('#marketSupply').html(market_supply);
		// $('#holders').html();
		// $('#transfers').html();
		// $('#price').html();
		$('#createtm').html(age + ' | ' + create_tm);
		$('#blocknum').html(block_num);

		if (detectMob()) {
			$('#account').html(
				`<div>			
					<span value="${accountNumHexa}" data-title="${accountNumHexa}">${accountNumHexa}
					</span>
				</div>`
			);
			$('#accountCopy').html(
				`<span value="${accountNumHexa}"  class="image" alt="logo" OnClick="javascript:copy_to_clipboard('${accountNumHexa}')" ></span>`
			);

			$('#ownerPk').html(
				`<div>			
					<span value="${ownerPk}" data-title="${ownerPk}">${CheckMaxString(ownerPk, 20)}
					</span>
				</div>`
			);
			$('#ownerPkCopy').html(
				`<span value="${ownerPk}"  class="image" alt="logo" OnClick="javascript:copy_to_clipboard('${ownerPk}')" ></span>`
			);

			$('#superPk').html(
				`<div>			
					<span value="${superPk}"  data-title="${superPk}">${CheckMaxString(superPk, 20)}
					</span>
				</div>`
			);
			$('#superPkCopy').html(
				`<span value="${superPk}"  class="image" alt="logo" OnClick="javascript:copy_to_clipboard('${superPk}')" ></span>`
			);
		} else {
			$('#account').html(
				`<div>			
					<span value="${accountNumHexa}" data-title="${accountNumHexa}">${accountNumHexa}
					</span>
				</div>`
			);
			$('#accountCopy').html(
				`<span value="${accountNumHexa}"  class="image" alt="logo" OnClick="javascript:copy_to_clipboard('${accountNumHexa}')" ></span>`
			);

			$('#ownerPk').html(
				`<div>			
					<span value="${ownerPk}" data-title="${ownerPk}">${ownerPk}
					</span>
				</div>`
			);
			$('#ownerPkCopy').html(
				`<span value="${ownerPk}"  class="image" alt="logo" OnClick="javascript:copy_to_clipboard('${ownerPk}')" ></span>`
			);

			$('#superPk').html(
				`<div>			
					<span value="${superPk}" data-title="${superPk}">${superPk}
					</span>
				</div>`
			);
			$('#superPkCopy').html(
				`<span value="${superPk}"  class="image" alt="logo" OnClick="javascript:copy_to_clipboard('${superPk}')" ></span>`
			);

		}

		$('#officialWeb').html();
		$('#socialProfiles').html();

		tokenTransferTable(dataObj.tokenAction);
		tokenHoldersTable();
		tokenNftTable(dataObj.tokenAction);

	};

	/**
	 * rendering datatable for tokenTransfer data
	 * @event tokenTransferTable
	 * @param
	 */
	function tokenTransferTable(cAction) {

		const tokentrtable = $('#tokentr-config').DataTable({

			ajax: {
				type: 'get',
				url: `${URL}${TOKENTRANSFER}`,
				data: { 'accountAction': cAction },
				dataSrc: 'result',
				// success: function (data) {
				// 	console.log("result"+JSON.stringify(data.result))
				// },
				error: function (request, status, error) {
					console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
				},
			},
			"createdRow": function (row, data, index) { //index = row
				$('td', row).eq(0).attr('id', 'tokentr-' + index + '-hash');
				$('td', row).eq(1).attr('id', 'tokentr-' + index + '-blkNo');
				$('td', row).eq(2).attr('id', 'tokentr-' + index + '-from');
				$('td', row).eq(3).attr('id', 'tokentr-' + index + '-to');
				$('td', row).eq(0).attr('val', data.hash);
				$('td', row).eq(1).attr('val', data.blk);
				$('td', row).eq(2).attr('val', data.fromAccHexa);
				$('td', row).eq(3).attr('val', data.toAccHexa);
			},
			"columnDefs": [
				{ targets: [0], className: 'alignLeft cursorPointer' },
				{ targets: [1, 2, 3], className: 'alignLeft cursorPointer' },
				{ targets: [5], className: 'alignLeft' },
				{ targets: [1, 4, 6, 7], className: 'alignLeft' },
				{ targets: [8, 9, 10], visible: false },
				{
					'bSortable': false,
					'aTargets': [0, 2, 3]
				},
				{
					"render": function (data, type, row) {
						return "#" + data
					},
					"targets": 1
				},
			],
			"columns": [
				{ "data": "shortenHash" },
				{ "data": "blk" },
				{ "data": "fromAccHexa" },
				{ "data": "toAccHexa" },
				{ "data": "type" },
				{ "data": "amount" },
				{ "data": "token" },
				{ "data": "status" },
				{ "data": "fromAccDecimal" },
				{ "data": "toAccDecimal" },
				{ "data": "hash" },
			],
			"searching": false,
			"ordering": false,
			"paging": true,
			"info": true,
			"stripeClasses": [],
			"lengthChange": false,
			"pageLength": 20,
			"order": [[0, 'desc']]
		});

		setInterval(function () {
			tokentrtable.ajax.reload();
		}, 30000);

		//move to Detail page
		$('#tokentr-config tbody').on('click', 'tr', function (event) {
			const target = $(event.target);
			$td = target.closest('td');
			const headerName = $td.closest('table').find('th').eq($td.index())[0].innerText

			const data = tokentrtable.row(this).data();

			if (headerName == 'Block No') {
				window.location.href = URL + "/block-details/" + data.blk;
			}
			else if (headerName == 'From') {

				window.location.href = URL + "/account-details/" + data.fromAccDecimal;
			}
			else if (headerName == 'To') {

				window.location.href = URL + "/account-details/" + data.toAccDecimal;
			}
			else if (headerName == 'Txn Hash') {
				window.location.href = URL + "/trans-hash-details/" + data.hash;
			}

		});

		//after rendering datatable, bind unique id on each row
		$('#tokentr-config').on('draw.dt', function () {
			let info = tokentrtable.page.info();
			let rows = tokentrtable.rows({ page: 'current' }).data();
			tokenIdBinding(tokentrtable.page.info().page, rows);
		});

		//after clicking pagination, bind unique id on each row
		$('#tokentr-config').on('page.dt', function () {
			let info = tokentrtable.page.info();
			//console.log('Showing page: ' + info.page + ' of ' + info.pages);

			$('#tokentr-config').on('draw.dt', function () {
				let info = tokentrtable.page.info();
				let rowNo = []
				let rowStartNo = info.page * 20;
				let rowEndNo = info.page * 20 + 20;
				for (let i = rowStartNo; i < rowEndNo; i++) {
					rowNo.push(i);
				}
				//console.log("rowNoArr:" + JSON.stringify(rowNo))
				let rows = tokentrtable.rows(rowNo).data();

				tokenIdBinding(tokentrtable.page.info().page, rows);
			});
		});
	};

	/**
	* creating context menu(mouse right click) on each page of token transfer datatable
	* @event tokenIdBinding
	* @param {String} msg A description of...
	*/
	function tokenIdBinding(pageNo, rows) {

		for (let i = 0; i < rows.count(); i++) {
			// block default context menu
			//console.log('id: ' + (i + parseInt(pageNo * 20)));
			let id = i + parseInt(pageNo * 20);
			document.getElementById("tokentr-" + id + "-hash").addEventListener("contextmenu", function (e) { e.preventDefault(); });
			document.getElementById("tokentr-" + id + "-blkNo").addEventListener("contextmenu", function (e) { e.preventDefault(); });
			document.getElementById("tokentr-" + id + "-from").addEventListener("contextmenu", function (e) { e.preventDefault(); });
			document.getElementById("tokentr-" + id + "-to").addEventListener("contextmenu", function (e) { e.preventDefault(); });

			//display custom context menu
			$("#tokentr-" + id + "-hash").mousedown(function (ev) {
				//1. mouse left click 
				//2. mouse middle click  
				//3. mouse right click 
				if (ev.which == 3) {
					createContextMenu("#tokentr-" + id + "-hash");
				}
			});

			$("#tokentr-" + id + "-blkNo").mousedown(function (ev) {
				if (ev.which == 3) {
					createContextMenu("#tokentr-" + id + "-blkNo");
				}
			});

			$("#tokentr-" + id + "-from").mousedown(function (ev) {
				if (ev.which == 3) {
					createContextMenu("#tokentr-" + id + "-from");
				}
			});

			$("#tokentr-" + id + "-to").mousedown(function (ev) {
				if (ev.which == 3) {
					createContextMenu("#tokentr-" + id + "-to");
				}
			});
		}
	}

	/**
	 * rendering datatable for tokenHolders data
	 * @event tokenTransferTable
	 * @param
	 */
	function tokenHoldersTable() {

		const holderstable = $('#holders-config').DataTable({

			ajax: {
				type: 'get',
				url: `${URL}${TOKENHOLDERS}`,
				dataSrc: 'result',
				// success: function (data) {
				// 	console.log("getTransactionsByBp2:" + JSON.stringify(data.result) + "\n");
				// },
				error: function (request, status, error) {
					console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
				},
			},
			"createdRow": function (row, data, index) { //index = row	
				$('td', row).eq(1).attr('id', 'holders-' + index + '-accountNum');
				$('td', row).eq(1).attr('val', data.myAccountNumHexa);
			},
			"columnDefs": [
				{ targets: [1], className: 'alignLeft cursorPointer' },
				{ targets: [2], className: 'alignLeft' },
				{ targets: [1], className: 'alignLeft' },
				{ targets: [4], visible: false },
				{ targets: [3], className: 'alignProgressTd' },
				{
					"render": function (data, type, row, meta) {
						return '<span><progress value="' + data + '" max="100"></progress></span><span style="margin-left:5px">' + data + '%</span>';
					},
					"targets": 3
				},
			],
			"columns": [
				{ "data": "rank" },
				{ "data": "myAccountNumHexa" },
				//{ "data": "accountNumHexa" },
				{ "data": "balance" },
				{ "data": "percentage" },
				{ "data": "myAccountNumDecimal" },
				//{ "data": "accountNumDecimal" },
				// { "data": "blkNum" },
				// { "data": "age" },							
				// { "data": "action" },
				// { "data": "amount" },	
				// { "data": "bps" },
				// { "data": "time" },

			],
			"searching": false,
			"ordering": false,
			"paging": true,
			"info": true,
			"stripeClasses": [],
			"lengthChange": false,
			"pageLength": 20,
			"order": [[0, 'desc']]
		});

		setInterval(function () {
			holderstable.ajax.reload();
		}, 30000);

		//when Age header clicked, change it to opposit side  (Age <-> Time) 
		const selectedElements = $("#holders-config tr").find("th:eq(1)");
		$(selectedElements).on('click', function () {

			let strAge = document.querySelector("#holders > tr:nth-child(1) > td:nth-child(2)")
			if (strAge.innerHTML.includes('nbsp')) {
				$('#holders-config tr').each(function (i) {
					$('#ageTime').html('Time');
					if (i > 0)//i=0 -> table header, i=1 => first line of table body
					{
						let time = holderstable.rows({ page: 'current' }).data()[i - 1].time;
						let bgt = getPullTime(Number(time)) || '';
						//	console.log("bgt:" + bgt + "\n");						
						$("td:eq(1)", this).text(bgt);
					}
				});
			} else {
				$('#holders-config tr').each(function (i) {
					$('#ageTime').html('Age');
					if (i > 0) {
						let age = holderstable.rows({ page: 'current' }).data()[i - 1].age;
						let bgt = age.replace(/&nbsp;/g, '');

						$("td:eq(1)", this).html(bgt);
					}
				});
			}
		});

		//move to Detail page
		$('#holders-config tbody').on('click', 'tr', function (event) {
			const target = $(event.target);
			$td = target.closest('td');
			const headerName = $td.closest('table').find('th').eq($td.index())[0].innerText

			const data = holderstable.row(this).data();

			if (headerName == 'Block No') {
				window.location.href = URL + "/block-details/" + data.blkNum;
			}
			else if (headerName == 'My Account No') {

				window.location.href = URL + "/account-details/" + data.myAccountNumDecimal;
			}

		});

		//after rendering datatable, bind unique id on each row
		$('#holders-config').on('draw.dt', function () {
			let info = holderstable.page.info();
			let rows = holderstable.rows({ page: 'current' }).data();
			holdersIdBinding(holderstable.page.info().page, rows);
		});

		//after clicking pagination, bind unique id on each row
		$('#holders-config').on('page.dt', function () {
			let info = holderstable.page.info();
			//console.log('Showing page: ' + info.page + ' of ' + info.pages);

			$('#holders-config').on('draw.dt', function () {
				let info = holderstable.page.info();
				let rowNo = []
				let rowStartNo = info.page * 20;
				let rowEndNo = info.page * 20 + 20;
				for (let i = rowStartNo; i < rowEndNo; i++) {
					rowNo.push(i);
				}
				//console.log("rowNoArr:" + JSON.stringify(rowNo))
				let rows = holderstable.rows(rowNo).data();

				holdersIdBinding(holderstable.page.info().page, rows);
			});
		});
	};

	/**
	* creating context menu(mouse right click) on each page of token holders datatable
	* @event holdersIdBinding
	* @param {String} msg A description of...
	*/
	function holdersIdBinding(pageNo, rows) {

		for (let i = 0; i < rows.count(); i++) {
			// block default context menu
			//console.log('id: ' + (i + parseInt(pageNo * 20)));
			let id = i + parseInt(pageNo * 20);
			document.getElementById("holders-" + id + "-accountNum").addEventListener("contextmenu", function (e) { e.preventDefault(); });

			//display custom context menu
			$("#holders-" + id + "-accountNum").mousedown(function (ev) {
				//1. mouse left click 
				//2. mouse middle click  
				//3. mouse right click 
				if (ev.which == 3) {
					createContextMenu("#holders-" + id + "-accountNum");
				}
			});
		}
	}

	/**
	 * rendering datatable for nft data
	 * @event getTokenNft
	 * @param
	 */
	function tokenNftTable(cAction) {

		const table = $('#tokennft-config').DataTable({

			ajax: {
				url: `${URL}${TOKENNFT}`,
				dataSrc: 'result',
				data: { 'targetAction': cAction },
				// success: function (data) {
				// 		console.log("getNftList:" + JSON.stringify(data.result) + "\n");
				// },
				error: function (request, status, error) {
					console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
				},
			},

			"columnDefs": [
				{ targets: [0, 1, 2, 3], className: 'dt-left cursorPointer' },
				{ targets: [4, 5, 7], visible: false },
			],
			"columns": [
				{ "data": "name" },
				{ "data": "symbol" },
				{ "data": "nftName" },
				{ "data": "shortenHash" },
				{ "data": "actionTarget" },
				{ "data": "scAction" },
				{ "data": "totalCnt" },
				{ "data": "scHash" },
			],
			"processing": false,
			"serverSide": false,
			"searching": false,		
			"ordering": false,
			"retrieve": false,
			"paging": true,
			"info": true,
			"stripeClasses": [],
			"lengthChange": false,
			"pageLength": 20,
			"order": [[0, 'desc']]
		});

		//move to NFT Detail page
		$('#tokennft-config tbody').on('click', 'tr', function () {
			const target = $(event.target);
			$td = target.closest('td');
			const headerName = $td.closest('table').find('th').eq($td.index())[0].innerText

			const data = table.row(this).data();

			if ( headerName == 'Name' || headerName == 'Symbol') {
				window.location.href = URL + "/token-details/" + data.actionTarget;
			}
			else if (headerName == 'NFT Name') {
				window.location.href = URL + "/nft-details/" + data.scAction;
			}
			else if (headerName == 'Contract Address') {
				window.location.href = URL + "/trans-hash-details/" + data.scHash;
			}

		});
	};

</script>