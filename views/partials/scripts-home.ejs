<!-- BEGIN PAGE LEVEL PLUGINS/CUSTOM SCRIPTS -->
<script src="/public/plugins/apex/apexcharts.min.js"></script>
<!-- END PAGE LEVEL PLUGINS/CUSTOM SCRIPTS -->

<script>
    let finlPrice = 0;
    let blk = {};
    let txns = {};
    $(document).ready(function () {

        //getBpList();
        getMain();
        loadBlk();
        loadTrx();
        drawChart();

        setInterval(() => {
            getMain();
        }, 1000 * 4);

        //move to Block page
        $(goToBlk).on('click', function () {
            window.location.href = URL + "/blocks";
        });
        //move to Txns page
        $(goToTxns).on('click', function () {
            window.location.href = URL + "/txns";
        });

    });

    /**
     * fetching data for landing page
     *
     * @event getMain
     * @param {String} msg A description of...
     */
    function getMain() {
        $.ajax({
            type: "get",
            url: `${URL}${HOME}`,
            success: function (data) {
                //console.log("getMain:" + JSON.stringify(data.result) + "\n");              

                // display response data from API
                summaryData(data.result);

                // animation               
                executeAni(data.result);
                // setInterval(executeAni, 10000);
                // setTimeout(executeAni);   
            },
            error: function (request, status, error) {
                console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
            },
        });
    };

   /**
	 * check if there is a matched data
	 * @event getFinlPrice
	 * @param 
	 */
     function getFinlPrice() {
			$.ajax({       
				type: 'GET',
                url: `${URL}${FINL_PRICE}`,		
                complete: function(d){                   
                    
                    if(d.responseJSON.apiRes.result == 'true')
                    {                  
                        //console.log("price:" + d.responseJSON.apiRes.data[0].ticker.latest.toFixed(4))             
                        finlPrice =  d.responseJSON.apiRes.data[0].ticker.latest//.toFixed(4)
                        $('#priceUsd').text(finlPrice);
                    }
                },
				error: function (request, status, error) {
					// console.log("error:" + JSON.stringify(error))   
				},
			});		
	};


    /**
     * loading main page  summaryData
     * @event summaryData
     * @param {String} msg A description of...
     */
    function summaryData(data) {

        //Summary Data
        getFinlPrice();

        $('#totalVol').text(new Intl.NumberFormat().format(data.totalVolume));
        $('#marketSupply').text(new Intl.NumberFormat().format(data.marketSupply));
        $('#tradingVol').text(data.tradingVol);

        //Total Data
        $('#totUserAccounts').text(data.userAccounts);
        $('#totTokenAccounts').text(data.tokenAccounts);
        $('#userAccounts24h').text(data.userAccounts24h);
        $('#tokenAccounts24h').text(data.tokenAccounts24h);

        $('#totalBlk').text(data.totalBlk);
        if ((Math.floor(data.dailyBlk / 100000)) > 0)
            $('#dailyBlkPlus').hide();
        $('#dailyBlk').text(data.dailyBlk);

        $('#totTxns').text(data.totalTxns);
        $('#dailyTxns').text(data.dailyTxns);
    };

    /**
     * loading main page blk data
     * @event loadBlk
     * @param {String} msg A description of...
     */
    function loadBlk() {

        const tableBlk = $('#block-main').DataTable({

            ajax: {
                url: `${URL}${LATEST_BLOCK}`,
                dataSrc: 'result',
                // success: function (data) {
                // 		//console.log("success:" + JSON.stringify(data.blk) + "\n");++
                // },
                complete: function (data) {
                    //A function to be called when the request finishes 
                    // (after success and error callbacks are executed). 
                    blk = data.responseJSON.result
                    //  console.log("complete:" + JSON.stringify(data.responseJSON.result) + "\n");
                },
                error: function (request, status, error) {
                    console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
                },
            },
            //id setting for td cell
            "createdRow": function (row, data, index) {    //index = row								
                $('td', row).eq(0).attr('id', 'blk-' + index + '-blkNo');
                $('td', row).eq(0).attr('val', data.blk);
                $('td', row).eq(4).attr('title', data.bpNo);
            },
            "columnDefs": [
                { targets: [0], className: 'dt-left cursorPointer' },
                { targets: [1, 2, 3, 4], className: 'dt-left' },
                { targets: [5], visible: false },
                {
                    'bSortable': false,
                    'aTargets': [1]
                },
                {
                    "render": function (data, type, row) {
                        return "#" + data
                    },
                    "targets": 0
                }
            ],
            "columns": [
                { "data": "blk" },
                { "data": "age" },
                { "data": "txCnt" },
                { "data": "reward" },
                { "data": "bp" },
                { "data": "time" }
            ],
            "destroy": true,
            "processing": false,
            "serverSide": false,
            "searching": false,
            "ordering": false,
            "retrieve": false,
            "paging": true,
            // https://datatables.net/reference/option/dom 
            "dom": 't', //페이지네이션 숨김처리  
            "info": true,
            "stripeClasses": [],
            "lengthChange": false,
            "pageLength": 20,
            "order": [[0, 'desc']]
        });

        setInterval(function () {
            console.log("===============mainBlockData=reload===============")
            tableBlk.ajax.reload();
            $('#ageTimeBlk').html('Age');
        }, 4000);

        //add cursorPointer on table header
        tableBlk.tables().header().to$(1).addClass('cursorPointer');

        convertAgeTimeBlk();
        moveToBlkDetail(tableBlk);    

        //after rendering datatable, bind unique id on each row
		$('#block-main').on('draw.dt', function () {
			let info = tableBlk.page.info();
			let rows = tableBlk.rows({ page: 'current' }).data();
			blkIdBinding(tableBlk.page.info().page, rows);
		});	
    }

    // function loadBlk(blk) {
    //     //Latest Blocks       
    //     //console.log("blk:"+JSON.stringify(blk));       
    //     let blockArr = []
    //     for (let i = 0; i < blk.length; i++) {
    //         let ids = "blk-" + i + "-blkNo";
    //         blockArr.push(
    //            `<tr>
    //             <td id="${ids}" val="${blk[i].blk}"><a href="/block-details/${blk[i].blk}"><span class="hover-content">${'#' + blk[i].blk}</span></a></td>
    //             <td>${blk[i].age}</td>
    //             <td>${blk[i].txCnt}</td>
    //             <td>${blk[i].reward}</td>
    //             <td data-toggle="tooltip" data-placement="top" title="${blk[i].bpNo}">${blk[i].bp}</td>     
    //         </tr>`
    //         );
    //     }
    //     $('#latestBlocks').html(blockArr);

    //     convertAgeTimeBlk(blk);
    //     blkIdBinding();
    // }

    /**
     * 
     * @event convertAgeTimeBlk
     * @param
     */
    function convertAgeTimeBlk() {

        $('#ageTimeBlk').html('Age');
        //when Age header clicked, change it to opposit side  (Age <-> Time) 
        const selectedElementsBlk = $("#block-main tr").find("th:eq(1)");
        $(selectedElementsBlk).on('click', function () {
            let strAge = document.querySelector("#latestBlocks > tr:nth-child(1) > td:nth-child(2)")
            if (strAge.innerHTML.includes('ago')) {
                $('#ageTimeBlk').html('Time');
                $('#block-main tr').each(function (i) {
                    if (i > 0)//i=0 -> table header, i=1 => first line of table body
                    {
                        let time = blk[i - 1].time
                        let bgt = getPullTime(Number(time)) || '';
                        //  console.log("Time_bgt:" + bgt + "\n");                      
                        $("td:eq(1)", this).text(bgt);
                    }
                });
            } else {
                $('#ageTimeBlk').html('Age');
                $('#block-main tr').each(function (i) {
                    if (i > 0) {
                        let age = blk[i - 1].age
                        let bgt = age.replace(/&nbsp;/g, '');
                        //  console.log("Age_bgt:" + bgt + "\n");                                   
                        $("td:eq(1)", this).html(bgt);
                    }
                });
            }
        });
    }

    function moveToBlkDetail(tableBlk) {
      //move to Block Detail page
		$('#block-main tbody').on('click', 'tr', function () {
			const data = tableBlk.row(this).data();
			window.location.href = URL + "/block-details/" + data.blk;
		});
    }

    /**
     * creating context menu(mouse right click) on each page of blocks datatable
     * @event blkIdBinding
     * @param {String} msg A description of...
     */   
	function blkIdBinding(pageNo, rows) {
		
		for (let i = 0; i < rows.count(); i++) {
			//console.log('id: ' + (i + parseInt(pageNo * 20)));
			let id = i + parseInt(pageNo * 20);
			document.getElementById("blk-" + id + "-blkNo").addEventListener("contextmenu", function (e) { e.preventDefault(); });
			
			//display custom context menu
			$("#blk-" + id + "-blkNo").mousedown(function (ev) {
				//1. mouse left click 
				//2. mouse middle click  
				//3. mouse right click 
				if (ev.which == 3) {
					createContextMenu("#blk-" + id + "-blkNo");
				}
			});
		}
	}
    /**
     * loading main page transaction data
     * @event loadTrx
     * @param {String} msg A description of...
     */
    function loadTrx() {

        const tableTrx = $('#txns-main').DataTable({

            ajax: {
                url: `${URL}${LATEST_TXNS}`,
                dataSrc: 'result',
                // success: function (data) {
                // 		//console.log("success:" + JSON.stringify(data.blk) + "\n");++
                // },                
                complete: function (data) {                    
                    //A function to be called when the request finishes 
                    // (after success and error callbacks are executed). 
                    txns = data.responseJSON.result
                    //console.log("complete:" + JSON.stringify(data.responseJSON.result) + "\n");
                },
                error: function (request, status, error) {
                    console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
                },
            },
            //id setting for td cell
            "createdRow": function (row, data, index) {    //index = row								
                $('td', row).eq(0).attr('id', 'txns-' + index + '-blkNo');
                $('td', row).eq(2).attr('id', 'txns-' + index + '-fromAcc');
                $('td', row).eq(3).attr('id', 'txns-' + index + '-toAcc');
                $('td', row).eq(0).attr('val', data.blk);
                $('td', row).eq(2).attr('val', data.fromAccHexa);
                $('td', row).eq(3).attr('val', data.toAccHexa);
            },
            "columnDefs": [
                { targets: [0, 2, 3], className: 'dt-left cursorPointer' },
                { targets: [0, 1, 2, 3, 4], className: 'dt-left' },
                { targets: [5, 6, 7], visible: false },
                {
                    "render": function (data, type, row) {
                        if (row.fromAccHexa != '0') {
                            return (row.fromAccHexa).substring(0, 4) + '...' + (row.fromAccHexa).substring(14, 16);
                        }
                        else {
                            return '0000' + '...' + '00';
                        }
                    },
                    "targets": 2
                },
                {
                    "render": function (data, type, row) {
                        if (row.toAccHexa != '0') {
                            return (row.toAccHexa).substring(0, 4) + '...' + (row.toAccHexa).substring(14, 16);
                        }
                        else {
                            return '0000' + '...' + '00';
                        }
                    },
                    "targets": 3
                },
                {
                    "render": function (data, type, row) {
                        if (row.type == 'TRANSFER') {
                            return data + ' ' + `<img style="width:16px; height:16px" src='${imgURL}:80/mainnetAction/${row.c_action}.svg' ></img>`
                        }
                        else {
                            return data
                        }
                    },
                    "targets": 4
                }
            ],
            "columns": [
                { "data": "type" },
                { "data": "age" },
                { "data": "fromAccHexa" },
                { "data": "toAccHexa" },
                { "data": "amount" },
                { "data": "fromAccDecimal" },
                { "data": "toAccDecimal" },
                { "data": "time" }
            ],
            "destroy": true,
            "processing": false,
            "serverSide": false,
            "searching": false,
            "ordering": false,
            "retrieve": false,
            "paging": true,
            // https://datatables.net/reference/option/dom 
            "dom": 't', //페이지네이션 숨김처리  
            "info": true,
            "stripeClasses": [],
            "lengthChange": false,
            "pageLength": 20,
            "order": [[0, 'desc']]
        });

        setInterval(function () {
            console.log("===============mainTrxData=reload===============")
            tableTrx.ajax.reload();
            $('#ageTimeTrx').html('Age');
        }, 4000);

        //add cursorPointer on table header
        tableTrx.tables().header().to$(1).addClass('cursorPointer');

        convertAgeTimeTrx();
        moveToTrxDetail(tableTrx);       
        //after rendering datatable, bind unique id on each row
		$('#txns-main').on('draw.dt', function () {
			let info = tableTrx.page.info();
			let rows = tableTrx.rows({ page: 'current' }).data();
			txnsIdBinding(tableTrx.page.info().page, rows);
		});	      
    }

    /**
     * loading main page transaction data
     * @event loadTrx
     * @param {String} msg A description of...
     */
    // function loadTrx(txns) {
    //     //Latest Txns       
    //     //console.log("trx:"+JSON.stringify(txns));       

    //     let txnsArr = []
    //     for (let i = 0; i < txns.length; i++) {

    //         let from = '';
    //         let to = '';
    //         //let bpName = '';

    //         //bpName = getBpName(txns[i].bp);

    //         if (txns[i].fromAccHexa != '0') {
    //             from = (txns[i].fromAccHexa).substring(0, 4) + '...' + (txns[i].fromAccHexa).substring(14, 16);
    //             to = (txns[i].toAccHexa).substring(0, 4) + '...' + (txns[i].toAccHexa).substring(14, 16);
    //         }
    //         else {
    //             from = '0000' + '...' + '00';
    //             to = '0000' + '...' + '00';
    //         }

    //         let logoImg = '';
    //         //if type is 'TRANSFER', token(security/utility) logo should be displayed 
    //         if (txns[i].type == 'TRANSFER') {
    //             logoImg = ' ' + `<img style="width:16px; height:16px; border: 0px"  src='${imgURL}:80/mainnetAction/${txns[i].c_action}.svg' ></img>`
    //         }
    //         else {
    //             //console.log("type:" + txns[i].type)
    //             logoImg = ``;
    //         }

    //         if (txns[i].fromAccHexa != 0000000000000000) {
    //             if (txns[i].toAccHexa != 0000000000000000) {
    //                 txnsArr.push(
    //                     `<tr>
    //                         <td><a href="/trans-hash-details/${txns[i].hash}" data-title="${txns[i].hash}"><span class="hover-content">${txns[i].type}</span></td>         
    //                         <td>${txns[i].age}</td>
    //                         <td id="${"txns-" + i + "-fromAcc"}" val="${txns[i].fromAccHexa}"><a href="/account-details/${txns[i].fromAccDecimal}"><span class="hover-content">${from}</span></a></td>
    //                         <td id="${"txns-" + i + "-toAcc"}" val="${txns[i].toAccHexa}"><a href="/account-details/${txns[i].toAccDecimal}"><span class="hover-content">${to}</span></a></td>
    //                         <td id="${"txns-" + i + "-amount"}" >${txns[i].amount}${logoImg}</span></td>  
    //                     </tr>`
    //                 );
    //             }
    //             else {
    //                 txnsArr.push(
    //                     `<tr>
    //                         <td><a href="/trans-hash-details/${txns[i].hash}" data-title="${txns[i].hash}"><span class="hover-content">${txns[i].type}</span></td>         
    //                         <td>${txns[i].age}</td>
    //                         <td id="${"txns-" + i + "-fromAcc"}" val="${txns[i].fromAccHexa}"><a href="/account-details/${txns[i].fromAccDecimal}"><span class="hover-content">${from}</span></a></td>
    //                         <td id="${"txns-" + i + "-toAcc"}" val="${txns[i].toAccHexa}"><span class="hover-content">${to}</span></td>
    //                         <td id="${"txns-" + i + "-amount"}" >${txns[i].amount}${logoImg}</span></td>  
    //                     </tr>`
    //                 );
    //             }
    //         } else {
    //             if (txns[i].toAccHexa != 0000000000000000) {
    //                 txnsArr.push(
    //                     `<tr>
    //                         <td><a href="/trans-hash-details/${txns[i].hash}" data-title="${txns[i].hash}"><span class="hover-content">${txns[i].type}</span></td>         
    //                         <td>${txns[i].age}</td>
    //                         <td id="${"txns-" + i + "-fromAcc"}" val="${txns[i].fromAccHexa}"><span class="hover-content">${from}</span></td>
    //                         <td id="${"txns-" + i + "-toAcc"}" val="${txns[i].toAccHexa}"><a href="/account-details/${txns[i].toAccDecimal}"><span class="hover-content">${to}</span></a></td>
    //                         <td id="${"txns-" + i + "-amount"}" >${txns[i].amount}${logoImg}</span></td>  
    //                     </tr>`
    //                 );
    //             } else {
    //                 txnsArr.push(
    //                     `<tr>
    //                         <td><a href="/trans-hash-details/${txns[i].hash}" data-title="${txns[i].hash}"><span class="hover-content">${txns[i].type}</span></td>         
    //                         <td>${txns[i].age}</td>
    //                         <td id="${"txns-" + i + "-fromAcc"}" val="${txns[i].fromAccHexa}"><span class="hover-content">${from}</span></td>
    //                         <td id="${"txns-" + i + "-toAcc"}" val="${txns[i].toAccHexa}"><span class="hover-content">${to}</span></td>
    //                         <td id="${"txns-" + i + "-amount"}" >${txns[i].amount}${logoImg}</span></td>  
    //                     </tr>`
    //                 );
    //             }
    //         }
    //     }
    //     $('#latestTxns').html(txnsArr);

    //     convertAgeTimeTrx(txns);
    //     txnsIdBinding();
    // }

    /**
     * 
     * @event convertAgeTimeTrx
     * @param
     */
    function convertAgeTimeTrx() {
        $('#ageTimeTrx').html('Age');
        //when Age header clicked, change it to opposit side  (Age <-> Time) 
        const selectedElementsTx = $("#txns-main tr").find("th:eq(1)");
        $(selectedElementsTx).on('click', function () {
            let strAge = document.querySelector("#latestTxns > tr:nth-child(1) > td:nth-child(2)")
            if (strAge.innerHTML.includes('ago')) {
                $('#ageTimeTrx').html('Time');
                $('#txns-main tr').each(function (i) {
                    if (i > 0)//i=0 -> table header, i=1 => first line of table body
                    {
                        let time = txns[i - 1].time
                        let bgt = getPullTime(Number(time)) || '';
                        // console.log("Time_bgt:" + bgt + "\n");		                    
                        $("td:eq(1)", this).text(bgt);
                    }
                });
            } else {
                $('#ageTimeTrx').html('Age');
                $('#txns-main tr').each(function (i) {
                    if (i > 0) {
                        let age = txns[i - 1].age
                        let bgt = age.replace(/&nbsp;/g, '');
                        // console.log("Age_bgt:" + bgt + "\n");	  
                        $("td:eq(1)", this).html(bgt);
                    }
                });
            }
        });
    }

    function moveToTrxDetail(tableTrx) {
     //move to Detail page
        $('#txns-main tbody').on('click', 'tr', function (event) {
            const target = $(event.target);
            $td = target.closest('td');
            const headerName = $td.closest('table').find('th').eq($td.index())[0].innerText
            const data = tableTrx.row(this).data();

            if (headerName == 'Action') {
                window.location.href = URL + "/trans-hash-details/" + data.hash;
            }
            else if (headerName == 'From') {
                if (data.fromAccDecimal != 0000000000000000)
                    window.location.href = URL + "/account-details/" + data.fromAccDecimal;
            }
            else if (headerName == 'To') {
                if (data.toAccDecimal != 0000000000000000)
                    window.location.href = URL + "/account-details/" + data.toAccDecimal;
            }          
        });
    } 

    /**
     * creating context menu(mouse right click) on latest Transactions table
     * @event txnsIdBinding
     * @param {String} msg A description of...
     */
    function txnsIdBinding() {
        for (let i = 0; i < 20; i++) {
            if (document.getElementById("txns-" + i + "-fromAcc") != null) {
                // block default context menu           
                document.getElementById("txns-" + i + "-fromAcc").addEventListener("contextmenu", function (e) { e.preventDefault(); });
                document.getElementById("txns-" + i + "-toAcc").addEventListener("contextmenu", function (e) { e.preventDefault(); });

                //display custom context menu
                $("#txns-" + i + "-fromAcc").mousedown(function (ev) {
                    if (ev.which == 3) {
                        createContextMenu("#txns-" + i + "-fromAcc");
                    }
                });

                $("#txns-" + i + "-toAcc").mousedown(function (ev) {
                    if (ev.which == 3) {
                        createContextMenu("#txns-" + i + "-toAcc");
                    }
                });
            }
        }
    }

    /**
     * fetching daily transaction data
     * @event drawChart
     * @param {String} msg A description of...
     */
    function drawChart() {
        $.ajax({
            type: "get",
            url: `${URL}${HOME}`,
            success: function (data) {
                //   console.log("drawChart:" + JSON.stringify(data.result) + "\n");
                dailyTransaction(data.result.scTxsHistory);
            },
            error: function (request, status, error) {
                console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
            },
        });
    };

    /**
     * drawing chart for daily transaction data
     * @event dailyTransaction
     * @param {String} msg A description of...
     */
    function dailyTransaction(obj) {
        let dateObj = []
        let xArray = []
        let yArray = []

        //히스토리 오브젝트를 2개의 배열(X축, Y축)에 저장
        for (let i = 0; i < obj.length; i++) {
            //console.log("date:"+ obj[i].date);
            obj[i].date = obj[i].date.split(' ');
            // console.log("month:"+ obj[i].date[0]);         
            obj[i].date[0] = obj[i].date[0]

            xArray[i] = obj[i].date[0].substring(0, 3) + ' ' + obj[i].date[1]
            yArray[i] = Number.parseInt(obj[i].ctsCnt)
        }

        //console.log("xArray:" + JSON.stringify(xArray));
        //console.log("yArray:" + JSON.stringify(yArray));

        let options = {
            colors: ['#4286f4', '#4286f4', '#4286f4'],  //dark blue, cobalt, azure, sky  ('#4286f4, #1338BE', '#8080FF', '#63C5DA')
            // colors: ['#F44336', '#E91E63', '#9C27B0'],
            // fill: {
            //     colors: ['#F44336', '#E91E63', '#9C27B0']  //red 
            // },
            series: [{
                name: "Transactions",
                data: yArray
            }],
            chart: {
                height: 250,
                type: 'area',
                animations: {
                    enabled: true,
                    easing: 'linear',
                    dynamicAnimation: {
                        speed: 1000
                    }
                },
                zoom: {
                    enabled: false
                },
                toolbar: {
                    show: false,
                }
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                curve: 'smooth'
            },
            title: {
                text: '',
                align: 'left'
            },
            grid: {
                row: {
                    colors: ['#f1f2f3', 'transparent'], // takes an array which will be repeated on columns
                    opacity: 0.5
                },
            },
            markers: {
                size: 1
            },
            xaxis: {
                labels: {
                    formatter: function (value) {
                        return value // The formatter function overrides format property
                    },
                },
                categories: xArray,
            },
            // yaxis: {
            //     max: 25000
            // },
            legend: {
                show: false
            },

        }

        chart = new ApexCharts(document.querySelector("#s-line"), options);

        chart.render().then(() => chart.ohYeahThisChartHasBeenRendered = true);

        if (chart.ohYeahThisChartHasBeenRendered) {
            chart.destroy();
            chart.ohYeahThisChartHasBeenRendered = false;
        }

    };

    /**
     * executing Animation
     * @event executeAni
     * @param 
     */
    function executeAni(data) {

        // const obj1 = document.getElementById("priceUsd"); 
        // const obj2 = document.getElementById("totalVol");
        const obj3 = document.getElementById("tradingVol");
        // const obj4 = document.getElementById("totUserAccounts");
        //const obj5 = document.getElementById("userAccounts24h");
        // const obj6 = document.getElementById("totTokenAccounts");
        //const obj7 = document.getElementById("tokenAccounts24h");
        const obj8 = document.getElementById("totalBlk");
        const obj9 = document.getElementById("dailyBlk");
        const obj10 = document.getElementById("totalTxns");
        const obj11 = document.getElementById("dailyTxns");

        //console.log("totalVol:" + JSON.stringify(obj2) + "\n");     

        // animateValue(obj1, 1, 1, 2000);
        // animateValue(obj2, data.totalVolume*0.999, data.totalVolume, 60000);
        animateValue(obj3, data.tradingVol * 0.999, data.tradingVol, 2000);
        // animateValue(obj4, data.totUserAccounts*0.999, data.totUserAccounts, 60000);               
        // animateValue(obj5, data.userAccounts24h*0.999, data.userAccounts24h, 60000);
        // animateValue(obj6, data.totTokenAccounts*0.999, data.totTokenAccounts, 60000);
        //animateValue(obj7, data.tokenAccounts24h*0.999, data.tokenAccounts24h, 60000);
        animateValue(obj8, data.totalBlk * 0.98, data.totalBlk, 2000);
        animateValue(obj9, data.dailyBlk * 0.98, data.dailyBlk, 2000);
        animateValue(obj10, data.totalTxns * 0.98, data.totalTxns, 2000);
        animateValue(obj11, data.dailyTxns * 0.98, data.dailyTxns, 2000);
    }

    /**
     * getting Bp list data
     * @event getBpList
     * @param {String} msg A description of...
     */
    // function getBpList() {
    // 	$.ajax({
    // 		type: "get",
    // 		url: `${URL}${BP_LIST}`,
    // 		success: function (d) {

    //             bpInfo = d.result.hubInfo;
    //             //console.log("bpInfo:" + JSON.stringify(bpInfo) + "\n");

    // 		},
    // 		error: function (request, status, error) {
    // 			//console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
    // 		},
    // 	});
    // };


</script>